{
  "version": 3,
  "sources": ["../../preact/hooks/src/index.js"],
  "sourcesContent": ["import { options } from 'preact';\n\n/** @type {number} */\nlet currentIndex;\n\n/** @type {import('./internal').Component} */\nlet currentComponent;\n\n/** @type {import('./internal').Component} */\nlet previousComponent;\n\n/** @type {number} */\nlet currentHook = 0;\n\n/** @type {Array<import('./internal').Component>} */\nlet afterPaintEffects = [];\n\nlet EMPTY = [];\n\nlet oldBeforeDiff = options._diff;\nlet oldBeforeRender = options._render;\nlet oldAfterDiff = options.diffed;\nlet oldCommit = options._commit;\nlet oldBeforeUnmount = options.unmount;\n\nconst RAF_TIMEOUT = 100;\nlet prevRaf;\n\noptions._diff = vnode => {\n\tcurrentComponent = null;\n\tif (oldBeforeDiff) oldBeforeDiff(vnode);\n};\n\noptions._render = vnode => {\n\tif (oldBeforeRender) oldBeforeRender(vnode);\n\n\tcurrentComponent = vnode._component;\n\tcurrentIndex = 0;\n\n\tconst hooks = currentComponent.__hooks;\n\tif (hooks) {\n\t\tif (previousComponent === currentComponent) {\n\t\t\thooks._pendingEffects = [];\n\t\t\tcurrentComponent._renderCallbacks = [];\n\t\t\thooks._list.forEach(hookItem => {\n\t\t\t\tif (hookItem._nextValue) {\n\t\t\t\t\thookItem._value = hookItem._nextValue;\n\t\t\t\t}\n\t\t\t\thookItem._pendingValue = EMPTY;\n\t\t\t\thookItem._nextValue = hookItem._pendingArgs = undefined;\n\t\t\t});\n\t\t} else {\n\t\t\thooks._pendingEffects.forEach(invokeCleanup);\n\t\t\thooks._pendingEffects.forEach(invokeEffect);\n\t\t\thooks._pendingEffects = [];\n\t\t}\n\t}\n\tpreviousComponent = currentComponent;\n};\n\noptions.diffed = vnode => {\n\tif (oldAfterDiff) oldAfterDiff(vnode);\n\n\tconst c = vnode._component;\n\tif (c && c.__hooks) {\n\t\tif (c.__hooks._pendingEffects.length) afterPaint(afterPaintEffects.push(c));\n\t\tc.__hooks._list.forEach(hookItem => {\n\t\t\tif (hookItem._pendingArgs) {\n\t\t\t\thookItem._args = hookItem._pendingArgs;\n\t\t\t}\n\t\t\tif (hookItem._pendingValue !== EMPTY) {\n\t\t\t\thookItem._value = hookItem._pendingValue;\n\t\t\t}\n\t\t\thookItem._pendingArgs = undefined;\n\t\t\thookItem._pendingValue = EMPTY;\n\t\t});\n\t}\n\tpreviousComponent = currentComponent = null;\n};\n\noptions._commit = (vnode, commitQueue) => {\n\tcommitQueue.some(component => {\n\t\ttry {\n\t\t\tcomponent._renderCallbacks.forEach(invokeCleanup);\n\t\t\tcomponent._renderCallbacks = component._renderCallbacks.filter(cb =>\n\t\t\t\tcb._value ? invokeEffect(cb) : true\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tcommitQueue.some(c => {\n\t\t\t\tif (c._renderCallbacks) c._renderCallbacks = [];\n\t\t\t});\n\t\t\tcommitQueue = [];\n\t\t\toptions._catchError(e, component._vnode);\n\t\t}\n\t});\n\n\tif (oldCommit) oldCommit(vnode, commitQueue);\n};\n\noptions.unmount = vnode => {\n\tif (oldBeforeUnmount) oldBeforeUnmount(vnode);\n\n\tconst c = vnode._component;\n\tif (c && c.__hooks) {\n\t\tlet hasErrored;\n\t\tc.__hooks._list.forEach(s => {\n\t\t\ttry {\n\t\t\t\tinvokeCleanup(s);\n\t\t\t} catch (e) {\n\t\t\t\thasErrored = e;\n\t\t\t}\n\t\t});\n\t\tif (hasErrored) options._catchError(hasErrored, c._vnode);\n\t}\n};\n\n/**\n * Get a hook's state from the currentComponent\n * @param {number} index The index of the hook to get\n * @param {number} type The index of the hook to get\n * @returns {any}\n */\nfunction getHookState(index, type) {\n\tif (options._hook) {\n\t\toptions._hook(currentComponent, index, currentHook || type);\n\t}\n\tcurrentHook = 0;\n\n\t// Largely inspired by:\n\t// * https://github.com/michael-klein/funcy.js/blob/f6be73468e6ec46b0ff5aa3cc4c9baf72a29025a/src/hooks/core_hooks.mjs\n\t// * https://github.com/michael-klein/funcy.js/blob/650beaa58c43c33a74820a3c98b3c7079cf2e333/src/renderer.mjs\n\t// Other implementations to look at:\n\t// * https://codesandbox.io/s/mnox05qp8\n\tconst hooks =\n\t\tcurrentComponent.__hooks ||\n\t\t(currentComponent.__hooks = {\n\t\t\t_list: [],\n\t\t\t_pendingEffects: []\n\t\t});\n\n\tif (index >= hooks._list.length) {\n\t\thooks._list.push({ _pendingValue: EMPTY });\n\t}\n\treturn hooks._list[index];\n}\n\n/**\n * @param {import('./index').StateUpdater<any>} [initialState]\n */\nexport function useState(initialState) {\n\tcurrentHook = 1;\n\treturn useReducer(invokeOrReturn, initialState);\n}\n\n/**\n * @param {import('./index').Reducer<any, any>} reducer\n * @param {import('./index').StateUpdater<any>} initialState\n * @param {(initialState: any) => void} [init]\n * @returns {[ any, (state: any) => void ]}\n */\nexport function useReducer(reducer, initialState, init) {\n\t/** @type {import('./internal').ReducerHookState} */\n\tconst hookState = getHookState(currentIndex++, 2);\n\thookState._reducer = reducer;\n\tif (!hookState._component) {\n\t\thookState._value = [\n\t\t\t!init ? invokeOrReturn(undefined, initialState) : init(initialState),\n\n\t\t\taction => {\n\t\t\t\tconst currentValue = hookState._nextValue\n\t\t\t\t\t? hookState._nextValue[0]\n\t\t\t\t\t: hookState._value[0];\n\t\t\t\tconst nextValue = hookState._reducer(currentValue, action);\n\n\t\t\t\tif (currentValue !== nextValue) {\n\t\t\t\t\thookState._nextValue = [nextValue, hookState._value[1]];\n\t\t\t\t\thookState._component.setState({});\n\t\t\t\t}\n\t\t\t}\n\t\t];\n\n\t\thookState._component = currentComponent;\n\n\t\tif (!currentComponent._hasScuFromHooks) {\n\t\t\tcurrentComponent._hasScuFromHooks = true;\n\t\t\tconst prevScu = currentComponent.shouldComponentUpdate;\n\t\t\tcurrentComponent.shouldComponentUpdate = function (p, s, c) {\n\t\t\t\tif (!hookState._component.__hooks) return true;\n\t\t\t\tconst stateHooks = hookState._component.__hooks._list.filter(\n\t\t\t\t\tx => x._component\n\t\t\t\t);\n\t\t\t\tconst allHooksEmpty = stateHooks.every(x => !x._nextValue);\n\t\t\t\t// When we have no updated hooks in the component we invoke the previous SCU or\n\t\t\t\t// traverse the VDOM tree further.\n\t\t\t\tif (allHooksEmpty) {\n\t\t\t\t\treturn prevScu ? prevScu.call(this, p, s, c) : true;\n\t\t\t\t}\n\n\t\t\t\t// We check whether we have components with a nextValue set that\n\t\t\t\t// have values that aren't equal to one another this pushes\n\t\t\t\t// us to update further down the tree\n\t\t\t\tconst shouldSkipUpdating = stateHooks.every(hookItem => {\n\t\t\t\t\tif (!hookItem._nextValue) return true;\n\t\t\t\t\tconst currentValue = hookItem._value[0];\n\t\t\t\t\thookItem._value = hookItem._nextValue;\n\t\t\t\t\thookItem._nextValue = undefined;\n\t\t\t\t\treturn currentValue === hookItem._value[0];\n\t\t\t\t});\n\n\t\t\t\tif (!shouldSkipUpdating) {\n\t\t\t\t\treturn prevScu ? prevScu.call(this, p, s, c) : true;\n\t\t\t\t}\n\n\t\t\t\t// When all set nextValues are equal to their original value\n\t\t\t\t// we bail out of updating.\n\t\t\t\t// Thinking: would this be dangerous with a batch of updates where\n\t\t\t\t// Comp1 updates --> Comp2 updated in same batch twice but has same eventual state --> this leads to us\n\t\t\t\t// not diving into Comp3\n\t\t\t\treturn false;\n\t\t\t};\n\t\t}\n\t}\n\n\treturn hookState._nextValue || hookState._value;\n}\n\n/**\n * @param {import('./internal').Effect} callback\n * @param {any[]} args\n */\nexport function useEffect(callback, args) {\n\t/** @type {import('./internal').EffectHookState} */\n\tconst state = getHookState(currentIndex++, 3);\n\tif (!options._skipEffects && argsChanged(state._args, args)) {\n\t\tstate._value = callback;\n\t\tstate._pendingArgs = args;\n\n\t\tcurrentComponent.__hooks._pendingEffects.push(state);\n\t}\n}\n\n/**\n * @param {import('./internal').Effect} callback\n * @param {any[]} args\n */\nexport function useLayoutEffect(callback, args) {\n\t/** @type {import('./internal').EffectHookState} */\n\tconst state = getHookState(currentIndex++, 4);\n\tif (!options._skipEffects && argsChanged(state._args, args)) {\n\t\tstate._value = callback;\n\t\tstate._pendingArgs = args;\n\n\t\tcurrentComponent._renderCallbacks.push(state);\n\t}\n}\n\nexport function useRef(initialValue) {\n\tcurrentHook = 5;\n\treturn useMemo(() => ({ current: initialValue }), []);\n}\n\n/**\n * @param {object} ref\n * @param {() => object} createHandle\n * @param {any[]} args\n */\nexport function useImperativeHandle(ref, createHandle, args) {\n\tcurrentHook = 6;\n\tuseLayoutEffect(\n\t\t() => {\n\t\t\tif (typeof ref == 'function') {\n\t\t\t\tref(createHandle());\n\t\t\t\treturn () => ref(null);\n\t\t\t} else if (ref) {\n\t\t\t\tref.current = createHandle();\n\t\t\t\treturn () => (ref.current = null);\n\t\t\t}\n\t\t},\n\t\targs == null ? args : args.concat(ref)\n\t);\n}\n\n/**\n * @param {() => any} factory\n * @param {any[]} args\n */\nexport function useMemo(factory, args) {\n\t/** @type {import('./internal').MemoHookState} */\n\tconst state = getHookState(currentIndex++, 7);\n\tif (argsChanged(state._args, args)) {\n\t\tstate._pendingValue = factory();\n\t\tstate._pendingArgs = args;\n\t\tstate._factory = factory;\n\t\treturn state._pendingValue;\n\t}\n\n\treturn state._value;\n}\n\n/**\n * @param {() => void} callback\n * @param {any[]} args\n */\nexport function useCallback(callback, args) {\n\tcurrentHook = 8;\n\treturn useMemo(() => callback, args);\n}\n\n/**\n * @param {import('./internal').PreactContext} context\n */\nexport function useContext(context) {\n\tconst provider = currentComponent.context[context._id];\n\t// We could skip this call here, but than we'd not call\n\t// `options._hook`. We need to do that in order to make\n\t// the devtools aware of this hook.\n\t/** @type {import('./internal').ContextHookState} */\n\tconst state = getHookState(currentIndex++, 9);\n\t// The devtools needs access to the context object to\n\t// be able to pull of the default value when no provider\n\t// is present in the tree.\n\tstate._context = context;\n\tif (!provider) return context._defaultValue;\n\t// This is probably not safe to convert to \"!\"\n\tif (state._value == null) {\n\t\tstate._value = true;\n\t\tprovider.sub(currentComponent);\n\t}\n\treturn provider.props.value;\n}\n\n/**\n * Display a custom label for a custom hook for the devtools panel\n * @type {<T>(value: T, cb?: (value: T) => string | number) => void}\n */\nexport function useDebugValue(value, formatter) {\n\tif (options.useDebugValue) {\n\t\toptions.useDebugValue(formatter ? formatter(value) : value);\n\t}\n}\n\n/**\n * @param {(error: any) => void} cb\n */\nexport function useErrorBoundary(cb) {\n\t/** @type {import('./internal').ErrorBoundaryHookState} */\n\tconst state = getHookState(currentIndex++, 10);\n\tconst errState = useState();\n\tstate._value = cb;\n\tif (!currentComponent.componentDidCatch) {\n\t\tcurrentComponent.componentDidCatch = err => {\n\t\t\tif (state._value) state._value(err);\n\t\t\terrState[1](err);\n\t\t};\n\t}\n\treturn [\n\t\terrState[0],\n\t\t() => {\n\t\t\terrState[1](undefined);\n\t\t}\n\t];\n}\n\n/**\n * After paint effects consumer.\n */\nfunction flushAfterPaintEffects() {\n\tlet component;\n\twhile ((component = afterPaintEffects.shift())) {\n\t\tif (!component._parentDom || !component.__hooks) continue;\n\t\ttry {\n\t\t\tcomponent.__hooks._pendingEffects.forEach(invokeCleanup);\n\t\t\tcomponent.__hooks._pendingEffects.forEach(invokeEffect);\n\t\t\tcomponent.__hooks._pendingEffects = [];\n\t\t} catch (e) {\n\t\t\tcomponent.__hooks._pendingEffects = [];\n\t\t\toptions._catchError(e, component._vnode);\n\t\t}\n\t}\n}\n\nlet HAS_RAF = typeof requestAnimationFrame == 'function';\n\n/**\n * Schedule a callback to be invoked after the browser has a chance to paint a new frame.\n * Do this by combining requestAnimationFrame (rAF) + setTimeout to invoke a callback after\n * the next browser frame.\n *\n * Also, schedule a timeout in parallel to the the rAF to ensure the callback is invoked\n * even if RAF doesn't fire (for example if the browser tab is not visible)\n *\n * @param {() => void} callback\n */\nfunction afterNextFrame(callback) {\n\tconst done = () => {\n\t\tclearTimeout(timeout);\n\t\tif (HAS_RAF) cancelAnimationFrame(raf);\n\t\tsetTimeout(callback);\n\t};\n\tconst timeout = setTimeout(done, RAF_TIMEOUT);\n\n\tlet raf;\n\tif (HAS_RAF) {\n\t\traf = requestAnimationFrame(done);\n\t}\n}\n\n// Note: if someone used options.debounceRendering = requestAnimationFrame,\n// then effects will ALWAYS run on the NEXT frame instead of the current one, incurring a ~16ms delay.\n// Perhaps this is not such a big deal.\n/**\n * Schedule afterPaintEffects flush after the browser paints\n * @param {number} newQueueLength\n */\nfunction afterPaint(newQueueLength) {\n\tif (newQueueLength === 1 || prevRaf !== options.requestAnimationFrame) {\n\t\tprevRaf = options.requestAnimationFrame;\n\t\t(prevRaf || afterNextFrame)(flushAfterPaintEffects);\n\t}\n}\n\n/**\n * @param {import('./internal').EffectHookState} hook\n */\nfunction invokeCleanup(hook) {\n\t// A hook cleanup can introduce a call to render which creates a new root, this will call options.vnode\n\t// and move the currentComponent away.\n\tconst comp = currentComponent;\n\tlet cleanup = hook._cleanup;\n\tif (typeof cleanup == 'function') {\n\t\thook._cleanup = undefined;\n\t\tcleanup();\n\t}\n\n\tcurrentComponent = comp;\n}\n\n/**\n * Invoke a Hook's effect\n * @param {import('./internal').EffectHookState} hook\n */\nfunction invokeEffect(hook) {\n\t// A hook call can introduce a call to render which creates a new root, this will call options.vnode\n\t// and move the currentComponent away.\n\tconst comp = currentComponent;\n\thook._cleanup = hook._value();\n\tcurrentComponent = comp;\n}\n\n/**\n * @param {any[]} oldArgs\n * @param {any[]} newArgs\n */\nfunction argsChanged(oldArgs, newArgs) {\n\treturn (\n\t\t!oldArgs ||\n\t\toldArgs.length !== newArgs.length ||\n\t\tnewArgs.some((arg, index) => arg !== oldArgs[index])\n\t);\n}\n\nfunction invokeOrReturn(arg, f) {\n\treturn typeof f == 'function' ? f(arg) : f;\n}\n"],
  "mappings": "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",
  "names": ["currentIndex", "currentComponent", "previousComponent", "prevRaf", "currentHook", "afterPaintEffects", "EMPTY", "oldBeforeDiff", "options", "oldBeforeRender", "oldAfterDiff", "diffed", "oldCommit", "oldBeforeUnmount", "unmount", "getHookState", "index", "type", "hooks", "length", "push", "useState", "initialState", "useReducer", "invokeOrReturn", "reducer", "init", "hookState", "_reducer", "action", "currentValue", "nextValue", "setState", "_hasScuFromHooks", "prevScu", "shouldComponentUpdate", "p", "s", "c", "stateHooks", "filter", "x", "every", "call", "this", "hookItem", "useEffect", "callback", "args", "state", "argsChanged", "_pendingArgs", "useLayoutEffect", "useRef", "initialValue", "useMemo", "current", "useImperativeHandle", "ref", "createHandle", "concat", "factory", "useCallback", "useContext", "context", "provider", "sub", "props", "value", "useDebugValue", "formatter", "useErrorBoundary", "cb", "errState", "componentDidCatch", "err", "undefined", "flushAfterPaintEffects", "component", "shift", "forEach", "invokeCleanup", "invokeEffect", "e", "vnode", "requestAnimationFrame", "raf", "done", "clearTimeout", "timeout", "HAS_RAF", "cancelAnimationFrame", "setTimeout", "commitQueue", "some", "hasErrored", "hook", "comp", "cleanup", "oldArgs", "newArgs", "arg", "f"]
}
